"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = serverRenderReactComponent;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _ComponentRegistry = _interopRequireDefault(require("./ComponentRegistry"));

var _createReactElement = _interopRequireDefault(require("./createReactElement"));

var _isCreateReactElementResultNonReactComponent = _interopRequireDefault(require("./isCreateReactElementResultNonReactComponent"));

var _buildConsoleReplay = _interopRequireDefault(require("./buildConsoleReplay"));

var _handleError = _interopRequireDefault(require("./handleError"));

function serverRenderReactComponent(options) {
  var name = options.name,
      domNodeId = options.domNodeId,
      trace = options.trace,
      props = options.props,
      railsContext = options.railsContext;
  var htmlResult = '';
  var hasErrors = false;

  try {
    var componentObj = _ComponentRegistry.default.get(name);

    if (componentObj.isRenderer) {
      throw new Error("Detected a renderer while server rendering component '".concat(name, "'. See https://github.com/shakacode/react_on_rails#renderer-functions"));
    }

    var reactElementOrRouterResult = (0, _createReactElement.default)({
      componentObj: componentObj,
      domNodeId: domNodeId,
      trace: trace,
      props: props,
      railsContext: railsContext
    });

    if ((0, _isCreateReactElementResultNonReactComponent.default)(reactElementOrRouterResult)) {
      // We let the client side handle any redirect
      // Set hasErrors in case we want to throw a Rails exception
      hasErrors = !!reactElementOrRouterResult.routeError;

      if (hasErrors) {
        console.error("React Router ERROR: ".concat((0, _stringify.default)(reactElementOrRouterResult.routeError)));
      }

      if (reactElementOrRouterResult.redirectLocation) {
        if (trace) {
          var redirectLocation = reactElementOrRouterResult.redirectLocation;
          var redirectPath = redirectLocation.pathname + redirectLocation.search;
          console.log("ROUTER REDIRECT: ".concat(name, " to dom node with id: ").concat(domNodeId, ", redirect to ").concat(redirectPath));
        } // For redirects on server rendering, we can't stop Rails from returning the same result.
        // Possibly, someday, we could have the rails server redirect.

      } else {
        htmlResult = reactElementOrRouterResult.renderedHtml;
      }
    } else {
      htmlResult = _server.default.renderToString(reactElementOrRouterResult);
    }
  } catch (e) {
    hasErrors = true;
    htmlResult = (0, _handleError.default)({
      e: e,
      name: name,
      serverSide: true
    });
  }

  var consoleReplayScript = (0, _buildConsoleReplay.default)();
  return (0, _stringify.default)({
    html: htmlResult,
    consoleReplayScript: consoleReplayScript,
    hasErrors: hasErrors
  });
}