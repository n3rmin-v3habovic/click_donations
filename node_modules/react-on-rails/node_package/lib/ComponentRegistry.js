"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/map"));

var _generatorFunction = _interopRequireDefault(require("./generatorFunction"));

// key = name used by react_on_rails
// value = { name, component, generatorFunction: boolean, isRenderer: boolean }
var registeredComponents = new _map.default();
var _default = {
  /**
   * @param components { component1: component1, component2: component2, etc. }
   */
  register: function register(components) {
    (0, _keys.default)(components).forEach(function (name) {
      if (registeredComponents.has(name)) {
        console.warn('Called register for component that is already registered', name);
      }

      var component = components[name];

      if (!component) {
        throw new Error("Called register with null component named ".concat(name));
      }

      var isGeneratorFunction = (0, _generatorFunction.default)(component);
      var isRenderer = isGeneratorFunction && component.length === 3;
      registeredComponents.set(name, {
        name: name,
        component: component,
        generatorFunction: isGeneratorFunction,
        isRenderer: isRenderer
      });
    });
  },

  /**
   * @param name
   * @returns { name, component, generatorFunction }
   */
  get: function get(name) {
    if (registeredComponents.has(name)) {
      return registeredComponents.get(name);
    }

    var keys = (0, _from.default)(registeredComponents.keys()).join(', ');
    throw new Error("Could not find component registered with name ".concat(name, ". Registered component names include [ ").concat(keys, " ]. Maybe you forgot to register the component?"));
  },

  /**
   * Get a Map containing all registered components. Useful for debugging.
   * @returns Map where key is the component name and values are the
   * { name, component, generatorFunction}
   */
  components: function components() {
    return registeredComponents;
  }
};
exports.default = _default;